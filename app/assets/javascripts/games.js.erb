$(function() {
  var game = new Kiwi.Game();
  var inGameState = new Kiwi.State("inGameState");

  inGameState.preload = function() {
    Kiwi.State.prototype.preload.call(this);
    this.addSpriteSheet( "cowboy", "<%= asset_path('cowboy.png') %>", 50, 55);
  };

  inGameState.create = function() {
    self = this;
    this.replayRound = false;

    this.player = new Kiwi.GameObjects.Sprite(this, this.textures["cowboy"], 100, 250, true);
    this.player.animation.add("idle", [0, 1, 2, 3], 0.2, true);
    this.player.animation.add("walk", [8, 9, 10, 11], 0.1, true);
    this.player.animation.add("shoot", [4, 5, 6, 7], 0.2, false);
    this.player.animation.add("reload", [0, 1, 17, 18, 2, 3], 0.2, false);
    this.player.animation.play("idle");
    this.player.moves = [];
    this.player.futurePosition = this.player.transform.x;
    this.player.addMove = function(move) {
      if (self.player.moves.length < 5 && !self.replayRound) {
        self.player.moves.push(move);
      }

      if (self.player.moves.length == 5) {
        console.log(self.player.moves);
        self.replayRound = true;
        self.readyToProcessNext = true;
      }
    };

    this.leftKey = this.game.input.keyboard.addKey(Kiwi.Input.Keycodes.LEFT);
    this.rightKey = this.game.input.keyboard.addKey(Kiwi.Input.Keycodes.RIGHT);
    this.upKey = this.game.input.keyboard.addKey(Kiwi.Input.Keycodes.UP);
    this.downKey = this.game.input.keyboard.addKey(Kiwi.Input.Keycodes.DOWN);

    this.addChild(this.player);
  };

  inGameState.update = function() {
    var self = this;
    Kiwi.State.prototype.update.call(this);

    if (this.leftKey.isUp) { this.leftKey.canAddMove = true; }
    if (this.rightKey.isUp) { this.rightKey.canAddMove = true; }
    if (this.upKey.isUp) { this.upKey.canAddMove = true; }
    if (this.downKey.isUp) { this.downKey.canAddMove = true; }

    if (this.leftKey.isDown && this.leftKey.canAddMove) { this.leftKey.canAddMove = false; this.player.addMove("left"); }
    if (this.rightKey.isDown && this.rightKey.canAddMove) { this.rightKey.canAddMove = false; this.player.addMove("right"); }
    if (this.upKey.isDown && this.upKey.canAddMove) { this.upKey.canAddMove = false; this.player.addMove("shoot"); }
    if (this.downKey.isDown && this.downKey.canAddMove) { this.downKey.canAddMove = false; this.player.addMove("reload"); }

    if (this.replayRound && this.readyToProcessNext) {
      var playerMove = this.player.moves.shift();

      if (playerMove == "left" && this.player.transform.x > 0) {
        this.player.futurePosition -= 50;
      }
      else if (playerMove == "right" && this.player.transform.x < 200) {
        this.player.futurePosition += 50;
      }
      else if (playerMove == "shoot") {
        this.player.shooting = true;
      }
      else if (playerMove == "reload") {
        this.player.reloading = true;
      }

      this.readyToProcessNext = false;
    }

    if (this.replayRound) {
      if (this.player.futurePosition > this.player.transform.x) {
        if (this.player.animation.currentAnimation.name != "walk") { this.player.animation.play("walk"); }
        this.player.transform.x += 1;
      }
      else if (this.player.futurePosition < this.player.transform.x) {
        if (this.player.animation.currentAnimation.name != "walk") { this.player.animation.play("walk"); }
        this.player.transform.x -= 1;
      }
      else {
        if (this.player.shooting) {
          if (this.player.animation.currentAnimation.name != "shoot") {
              this.player.animation.play("shoot");
          }
          this.player.shooting = this.player.animation.isPlaying;
        }
        else if (this.player.reloading) {
          if (this.player.animation.currentAnimation.name != "reload") {
              this.player.animation.play("reload");
          }
          this.player.reloading = this.player.animation.isPlaying;
        }
        else {
          this.replayRound = this.player.moves.length > 0;
          this.readyToProcessNext = this.replayRound;
          this.player.animation.play("idle");
        }
      }
    }
  };

  game.states.addState(inGameState);

  game.states.switchState("inGameState");
});
