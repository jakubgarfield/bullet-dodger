$(function() {
  var game = new Kiwi.Game();
  var inGameState = new Kiwi.State("inGameState");

  inGameState.preload = function() {
    Kiwi.State.prototype.preload.call(this);
    this.addSpriteSheet( "cowboy", "<%= asset_path('cowboy.png') %>", 50, 55);
  };

  inGameState.createCharacter = function(x, y) {
    var character = new Kiwi.GameObjects.Sprite(this, this.textures["cowboy"], x, y, true);
    character.animation.add("idle", [0, 1, 2, 3], 0.2, true);
    character.animation.add("confused", [17, 18, 19, 20], 0.2, false);
    character.animation.add("walk", [8, 9, 10, 11], 0.1, true);
    character.animation.add("shoot", [4, 5, 6, 7], 0.2, false);
    character.animation.add("reload", [0, 1, 17, 18, 2, 3], 0.2, false);
    character.animation.play("idle");
    character.moves = [];
    character.futurePosition = character.transform.x;
    character.bullets = 5;
    character.reload = function() {
      if (this.bullets < 5) {
        this.bullets += 1;
        this.reloading = true;
      }
      else {
        this.confused = true;
      }
    };
    character.shoot = function() {
      if (this.bullets > 0) {
        this.bullets -= 1;
        this.shooting = true;
      }
      else {
        this.confused = true;
      }
    };
    character.animate = function(reverse) {
      if (this.readyToProcessNext) {
        if (this.moves.length > 0) {
          var playerMove = this.moves.shift();
          if (reverse && playerMove == "left") {
            playerMove = "right";
          }
          else if (reverse && playerMove == "right") {
            playerMove = "left";
          }

          if (playerMove == "left" && this.transform.x > 0) {
            this.futurePosition += -50;
          }
          else if (playerMove == "right" && this.transform.x < 200) {
            this.futurePosition += 50;
          }
          else if (playerMove == "shoot") {
            this.shoot();
          }
          else if (playerMove == "reload") {
            this.reload();
          }

          this.readyToProcessNext = false;
        }
      }

      if (this.futurePosition > this.transform.x) {
        if (this.animation.currentAnimation.name != "walk") { this.animation.play("walk"); }
        this.transform.x += 1;
      }
      else if (this.futurePosition < this.transform.x) {
        if (this.animation.currentAnimation.name != "walk") { this.animation.play("walk"); }
        this.transform.x -= 1;
      }
      else {
        if (this.shooting) {
          if (this.animation.currentAnimation.name != "shoot") {
            this.animation.play("shoot");
          }
          this.shooting = this.animation.isPlaying;
        }
        else if (this.reloading) {
          if (this.animation.currentAnimation.name != "reload") {
            this.animation.play("reload");
          }
          this.reloading = this.animation.isPlaying;
        }
        else if (this.confused) {
          if (this.animation.currentAnimation.name != "confused") {
            this.animation.play("confused");
          }
          this.confused = this.animation.isPlaying;
        }
        else {
          this.readyToProcessNext = true;
          this.idle();
        }
      }
    };
    character.idle = function() {
      if (this.animation.currentAnimation.name != "idle") { this.animation.play("idle"); }
    };
    return character;
  };

  inGameState.create = function() {
    var self = this;
    this.replayRound = false;

    this.opponent = this.createCharacter(100, 0);
    this.opponent.moves = ["left", "left", "shoot", "reload", "right"]
    this.player = this.createCharacter(100, 250);
    this.player.addMove = function(move) {
      if (self.player.moves.length < 5 && !self.replayRound) { console.log(move); self.player.moves.push(move); }

      if (self.player.moves.length == 5) {
        console.log(self.player.moves);
        self.replayRound = true;
        self.player.readyToProcessNext = true;
      }
    };

    this.leftKey = this.game.input.keyboard.addKey(Kiwi.Input.Keycodes.LEFT);
    this.rightKey = this.game.input.keyboard.addKey(Kiwi.Input.Keycodes.RIGHT);
    this.upKey = this.game.input.keyboard.addKey(Kiwi.Input.Keycodes.UP);
    this.downKey = this.game.input.keyboard.addKey(Kiwi.Input.Keycodes.DOWN);

    this.addChild(this.opponent);
    this.addChild(this.player);
  };

  inGameState.update = function() {
    var self = this;
    Kiwi.State.prototype.update.call(this);

    if (this.leftKey.isUp) { this.leftKey.canAddMove = true; }
    if (this.rightKey.isUp) { this.rightKey.canAddMove = true; }
    if (this.upKey.isUp) { this.upKey.canAddMove = true; }
    if (this.downKey.isUp) { this.downKey.canAddMove = true; }

    if (this.leftKey.isDown && this.leftKey.canAddMove) { this.leftKey.canAddMove = false; this.player.addMove("left"); }
    if (this.rightKey.isDown && this.rightKey.canAddMove) { this.rightKey.canAddMove = false; this.player.addMove("right"); }
    if (this.upKey.isDown && this.upKey.canAddMove) { this.upKey.canAddMove = false; this.player.addMove("shoot"); }
    if (this.downKey.isDown && this.downKey.canAddMove) { this.downKey.canAddMove = false; this.player.addMove("reload"); }

    if (this.replayRound) {
      this.replayRound = this.player.moves.length > 0 || this.opponent.moves.length > 0 || !this.player.readyToProcessNext || !this.opponent.readyToProcessNext;
      this.player.animate();
      this.opponent.animate(true);
    }
  };

  game.states.addState(inGameState);

  game.states.switchState("inGameState");
});
